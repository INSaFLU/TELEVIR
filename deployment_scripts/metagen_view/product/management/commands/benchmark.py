import os
from datetime import date

import pandas as pd
from django.contrib.auth.models import User
from django.core.management.base import BaseCommand
from pathogen_detection.models import FinalReport, Projects, RunDetail, RunMain, Sample
from pathogen_detection.utilities.eda_class_native import Validator, run_eda
from pathogen_detection.utilities.graph_utils import pipeline_tree, tree_plot
from product.utils import Run_Main_from_Fastq_Input


def read_parameters(row):
    try:
        params = pd.read_csv(row.params_file_path, sep="\t")
        params["run"] = row.run_name
        params["run_id"] = row.run_id
        params["sample"] = row.sample_name
        params["sample_id"] = row.sample_id
        params["project"] = row.project_name
        params["project_id"] = row.project_id
        return params

    except FileNotFoundError:
        return None


def collect_parameters(queryset_df):
    all_parameters = []
    unique_runs_df = queryset_df.drop_duplicates(subset=["run_id"])
    for index, row in unique_runs_df.iterrows():
        params = read_parameters(row)
        if params is not None:
            all_parameters.append(params)
    return pd.concat(all_parameters)


class Command(BaseCommand):
    help = "deploy run"

    def add_arguments(self, parser):
        parser.add_argument(
            "-p",
            "--parameters",
            type=str,
            help="parameters file generated by summarize command",
        )

        parser.add_argument(
            "-r",
            "--results",
            type=str,
            help="results file generated by summarize command",
        )

        parser.add_argument(
            "--validation_file",
            type=str,
            help="validation file for samples, must include at least sample_name and one of: taxid, accid, description",
        )

        parser.add_argument(
            "--tech",
            default="nanopore",
            type=str,
            help="project to target",
        )

    def handle(self, *args, **options):
        ###
        #

        validator = Validator(options["validation_file"])

        eda_runs = run_eda(validator, options["results"], options["parameters"])
        eda_runs.run_input()
        eda_runs.remove_samples_unvalidated()
        eda_runs.complement_input()

        eda_runs.split()
        eda_runs.summarize_runs()
        eda_runs.describe()

        summary = eda_runs.describe_print()

        print(summary)

        eda_runs.combine_data()
        dataset = eda_runs.combdat
        sources = eda_runs.sources
        print(sources)
        # eda_runs.combine_data_full()
        combdat_full_process = eda_runs.process(eda_runs.combdat)
        run_assess = eda_runs.runid_summary(combdat_full_process)
        full_data = eda_runs.combdat

        #####
        ### generate tree

        pipe_tree = pipeline_tree()
        pipe_tree.param_input(options["tech"])
        pipe_tree.create_pipe_tree()
        # print(eda_runs.softs.head())

        print("scoring")
        pipe_tree.node_scores(run_assess, eda_runs.softs)
        #
